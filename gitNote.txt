http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000

git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。git config --global user.name “Zhouenze” 
通过git init命令把这个目录变成Git可以管理的仓库。git init
命令git add告诉Git，把文件添加到仓库。git add file1 file2
git commit -m "wrote a readme file"
git status
git diff readme.txt; git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别。
问题：Unix通用diff格式？
历史记录git log如果想要好看，加上--pretty=oneline
git reset --hard命令跳转到指定commit号（写够前几位能确定哪个commit就行）的版本。HEAD表示当前branch的当前commit，上一个commit就是HEAD^，上上一个版本就是HEAD^^，往上100个版本写成HEAD~100。git reset --hard HEAD^
git reflog用来记录你的每一次命令，会提供每次commit的号码，可用于寻找commit号。
电脑能看到的目录是工作区，.git文件夹中称为版本库，版本库中有stage暂存区，还有各个分支，以及指向当前分支当前commit的HEAD指针。
status中红字是待添加到暂存区，绿字是待提交到分支。
add是把文件修改添加到暂存区，commit是把暂存区的所有内容提交到当前分支。创建版本库时自动新建了master分支。
git checkout -- file丢弃工作区的修改。两种情况：一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
git reset HEAD file可以把暂存区的修改撤销掉（unstage），文件不变，只是现在所有修改都在工作区没进暂存区。
所以想要撤销修改的话：如果工作区修改了还没放到暂存区：checkout命令去除红字。如果已经放到暂存区：先reset去除绿字再checkout去除红字。
git rm file从版本库删除文件，然后git commit生效。误删回复：checkout
ssh相关：看网站。git通过ssh协议确认只有你的设备能提交到你的库，可以吧各个设备的public key都提交给他。
空仓库可以和已有本地仓库关联，然后把内容推送上去：git remote add origin git@server-name:path/repo-name.git。常用：git remote add origin git@github.com:Zhouenze/repo-name.git
添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的。
git push -u origin master：把master分支推送到origin仓库（远程仓库）的master分支。由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送到远程仓库，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。从现在起，只要本地作了提交，就可以通过命令：git push origin master把本地master分支的最新修改推送至origin远程仓库。
上面讲的是先有本地库再建立远程库。如果从零开发最好先建立远程库再clone：git clone git@github.com:Zhouenze/repo-name.git。此处可以使用多种地址，就是代表多种协议，默认的git协议使用ssh比较好，https最好别用，慢，每次都要输入口令。
分支：创建一个分支，在自己的分支上干活，想提交就提交不影响别人，干完了一次性合并到原来分支。
HEAD本质上不是指向提交的，而是指向某个branch指针，这个指针指向这个branch的当前提交。新建分支就是新建branch指针，各个branch指针按照各自的commit一步一步向前走，合并分支就是改指针+处理冲突，删除分支就是删除指针。
git branch branchName新建分支。
git checkout branchName切换分支。
git checkout -b branchName新建并切换。
git branch列出分支，当前分支会有*
git merge branchName合并指定分支到当前分支。Fast-forward模式：直接改指针，快。
git branch -d branchName删除分支。
如果两个分支各自都有新的提交，则无法快速合并，git merge branchName命令后冲突文本文件内容中会有两者的修改，在文本文件中修改处理冲突后再add,commit成为一个公共的新commit，此时分支合并。
git log加上--graph参数可以看分支图。
合并分支时，如果可能git会使用fast-forward模式，此时若删除分支会丢失分支信息。解决方法：git merge --no-ff -m "merge with no-ff" branchName，即禁用fast-forward模式，产生一个新commit并merge于此，-m后的就是新commit的message
分支策略：master非常稳定；所有人在dev上工作，很不稳定，每一阶段结束merge到master；每个人从dev分支出自己的branch工作
bug分支：从需要修复bug的分支上新建临时分支，修复bug，merge回去，删除临时分支
git stash存储当前工作现场，完成后git status就是clean的（除非有未追踪文件）
git stash list查看存储的工作现场
git stash apply恢复不删除存档
git stash pop恢复并删除存档
git stash drop删除存档
常用：git stash list查看之后git stash apply stash@{0}恢复
开发一个新feature，最好新建一个分支
如果要丢弃一个没有被合并过的分支，可以通过git branch -D branchName强行删除。
从远程仓库克隆时，实际上Git自动把本地仓库的master分支和远程仓库的master分支对应起来了，远程仓库的默认名称是origin。
查看远程库的信息：git remote （-v）
推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上。一般而言，master和dev要同步，其他随便。
clone时默认只clone master分支。创建远程origin的dev分支到本地：git checkout -b dev origin/dev
push冲突：先pull下来，在本地合并解决冲突再推送。如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。pull就是远程和本地对应branch的merge，在本地产生标出conflict的文件，处理conflict之后push。
标签：指向某个commit的有名常量指针。
git tag查看所有标签。
git tag tagName在当前branch的最新一个commit上打名为tagName的标签。
git tag tagName commitID在commitID的那个commit上打名为tagName的标签。
git show tagName查看标签信息。
创建带有说明的标签：用-a指定标签名，-m指定说明文字：git tag -a v0.1 -m "version 0.1 released" 3628164
git tag -d tagName删除本地标签。
创建的标签都在本地。推送到远程：git push origin tagName或git push origin --tags删除远程标签：先本地删除，然后git push origin :refs/tags/tagName
github上点fork就在自己的账号下克隆了一个仓库，然后在自己的仓库这里修改，因为直接clone原版不能push。最后通过向官方仓库pull request贡献代码。
在Git工作区的根目录下创建.gitignore文件并提交，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。
别名：git —-global alias.newWord oldWord
git —-global alias.newWord “string”
—-global表示对当前电脑账户起作用，不加表示仅对当前repo起作用。
当前repo配置在.git/config中，当前用户配置在~/.gitconfig中
在eclipse中使用git：
clone下来：file-import-git-projectsFromGit-next-cloneURL(远程)-next-<pasteInURL不管别的>-next-<chooseBranches>-next-next-importAsGeneralProject-next-finish
已有项目连接远程新仓库：
	在github上新建仓库；
	为本项目建立本地git仓库：打开项目-右键-team-shareProject-createRepositoryInParentFolderOrProject、选中并点击create/指定路径并create
	推送并连接到远程仓库：右键-team-commit(新建repo显示NO-HEAD是无法推送到远程的)
	右键-team-remote-push-<pasteInURL不管别的>-next-next-finish-ok
git操作：都去找右键-team，其中show in repositories view特别好用，在这里可以新建、更换branch等等。注意工作区打开的文件是文件夹里看到的样子，只有一个版本，commit之后才属于各自的branch，此时切换branch可以看到各个版本。
右键一个branch可以merge，选commit，if ff则create new。如果conflict，则工作区出现conflict解决文件供处理。解决之后commit conflict file则完成（此时可以尝试再次merge，会发现already up to date）。
右键team可以解除git管理，删除repository不删除workingTree不remove from workspace就好。